<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>e-Shielded | Video Chat</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <script
      src="https://kit.fontawesome.com/a076d0e917.js"
      crossorigin="anonymous"
    ></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <style>
      #video-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1rem;
        padding: 1rem;
      }
      video {
        width: 100%;
        height: auto;
        border-radius: 8px;
        background: #000;
      }
      .messages {
        overflow-y: auto;
        max-height: 400px;
      }
      .message {
        margin: 0.5rem 0;
        padding: 0.75rem;
        border-radius: 0.5rem;
      }
    </style>
    <script>
      const ROOM_ID = "<%= roomId %>";
    </script>
  </head>
  <body class="bg-gray-100 min-h-screen">
    <!-- Header -->
    <header class="bg-white shadow-sm fixed w-full top-0 z-50">
      <div
        class="max-w-7xl mx-auto px-4 py-4 flex justify-between items-center"
      >
        <div class="flex items-center">
          <i class="fas fa-shield-alt h-8 w-8 text-purple-700 text-2xl"></i>
          <span class="ml-2 text-2xl font-bold text-purple-700"
            >e-Shielded Chat</span
          >
        </div>
        <button
          id="leaveBtn"
          class="px-4 py-2 text-purple-700 hover:bg-purple-50 rounded-lg transition-all"
        >
          <i class="fas fa-angle-left mr-2"></i>Leave
        </button>
      </div>
    </header>

    <!-- Main Content -->
    <div class="flex pt-20 h-screen">
      <!-- Left Section (Video) -->
      <div class="w-3/4 bg-white flex flex-col">
        <div class="flex-1 overflow-hidden">
          <div id="video-grid"></div>
        </div>
        <div class="p-4 bg-gray-100 border-t flex justify-between items-center">
          <div class="flex gap-4">
            <button
              id="stopVideo"
              class="p-3 bg-purple-700 text-white rounded-full hover:bg-purple-800 transition-all"
            >
              <i class="fas fa-video"></i>
            </button>
            <button
              id="muteButton"
              class="p-3 bg-purple-700 text-white rounded-full hover:bg-purple-800 transition-all"
            >
              <i class="fas fa-microphone"></i>
            </button>
            <button
              id="showChat"
              class="p-3 bg-purple-700 text-white rounded-full hover:bg-purple-800 transition-all"
            >
              <i class="fas fa-comment"></i>
            </button>
          </div>
          <div>
            <button
              id="inviteButton"
              class="p-3 bg-purple-700 text-white rounded-full hover:bg-purple-800 transition-all"
            >
              <i class="fas fa-user-plus"></i>
            </button>
          </div>
        </div>
      </div>

      <!-- Right Section (Chat) -->
      <div
        id="chatPanel"
        class="w-1/4 bg-gray-800 text-white flex flex-col transition-all duration-300"
      >
        <div class="flex-1 p-4">
          <div class="messages"></div>
        </div>
        <div class="p-4 bg-gray-900 flex gap-2">
          <input
            id="chat_message"
            type="text"
            autocomplete="off"
            placeholder="Type message here..."
            class="flex-1 p-2 bg-gray-700 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
          />
          <button
            id="send"
            class="p-2 bg-purple-700 rounded-lg hover:bg-purple-800 transition-all"
          >
            <i class="fas fa-paper-plane"></i>
          </button>
        </div>
      </div>
    </div>

    <script>
      const socket = io();
      const peer = new Peer();
      let myVideoStream;
      const videoGrid = document.getElementById("video-grid");
      const messages = document.querySelector(".messages");
      let chatVisible = true;

      // Video functionality
      navigator.mediaDevices
        .getUserMedia({ video: true, audio: true })
        .then((stream) => {
          myVideoStream = stream;
          addVideoStream(myVideoStream, true);

          peer.on("call", (call) => {
            call.answer(stream);
            call.on("stream", (userVideoStream) => {
              addVideoStream(userVideoStream);
            });
          });

          socket.on("user-connected", (userId) => {
            connectToNewUser(userId, stream);
          });
        })
        .catch((err) => {
          console.error("Failed to get media:", err);
          alert("Please allow camera and microphone access");
        });

      peer.on("open", (id) => {
        socket.emit("join-room", ROOM_ID, id);
      });

      function addVideoStream(stream, muted = false) {
        const video = document.createElement("video");
        video.srcObject = stream;
        video.muted = muted;
        video.addEventListener("loadedmetadata", () => {
          video.play();
        });
        videoGrid.appendChild(video);
      }

      function connectToNewUser(userId, stream) {
        const call = peer.call(userId, stream);
        call.on("stream", (userVideoStream) => {
          addVideoStream(userVideoStream);
        });
      }

      // Chat functionality
      document.getElementById("send").addEventListener("click", sendMessage);
      document
        .getElementById("chat_message")
        .addEventListener("keypress", (e) => {
          if (e.key === "Enter") sendMessage();
        });

      function sendMessage() {
        const msg = document.getElementById("chat_message").value.trim();
        if (msg) {
          socket.emit("message", msg);
          addMessage(msg, true);
          document.getElementById("chat_message").value = "";
        }
      }

      socket.on("message", (msg) => {
        addMessage(msg, false);
      });

      function addMessage(msg, isMine) {
        const div = document.createElement("div");
        div.className = `message ${
          isMine ? "bg-purple-600 text-white ml-auto" : "bg-gray-300 text-black"
        } max-w-xs`;
        div.innerHTML = `
                <p class="text-sm">${msg}</p>
                <span class="text-xs block mt-1">${new Date().toLocaleTimeString()}</span>
            `;
        messages.appendChild(div);
        messages.scrollTop = messages.scrollHeight;
      }

      // Controls
      document.getElementById("muteButton").addEventListener("click", () => {
        const enabled = myVideoStream.getAudioTracks()[0].enabled;
        myVideoStream.getAudioTracks()[0].enabled = !enabled;
        this.classList.toggle("bg-red-600", !enabled);
      });

      document.getElementById("stopVideo").addEventListener("click", () => {
        const enabled = myVideoStream.getVideoTracks()[0].enabled;
        myVideoStream.getVideoTracks()[0].enabled = !enabled;
        this.classList.toggle("bg-red-600", !enabled);
      });

      document.getElementById("showChat").addEventListener("click", () => {
        chatVisible = !chatVisible;
        const chatPanel = document.getElementById("chatPanel");
        chatPanel.style.width = chatVisible ? "25%" : "0";
        chatPanel.style.opacity = chatVisible ? "1" : "0";
      });

      document.getElementById("inviteButton").addEventListener("click", () => {
        const link = `${window.location.origin}/chat/${ROOM_ID}`;
        navigator.clipboard.writeText(link);
        alert("Chat link copied to clipboard!");
      });

      document.getElementById("leaveBtn").addEventListener("click", () => {
        if (confirm("Are you sure you want to leave the chat?")) {
          myVideoStream.getTracks().forEach((track) => track.stop());
          window.location.href = "/";
        }
      });

      // Handle user disconnection
      socket.on("user-disconnected", (userId) => {
        const videos = videoGrid.getElementsByTagName("video");
        for (let video of videos) {
          if (video.dataset.userId === userId) {
            video.remove();
          }
        }
      });
    </script>
  </body>
</html>
